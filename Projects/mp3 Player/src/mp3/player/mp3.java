/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mp3.player;

import java.awt.Color;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.*;
import static mp3.player.MainClass.*;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.Line.Info;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.Port;
import static mp3.player.DB.Connect;



/**
 *
 * @author akash
 */
public class mp3 extends javax.swing.JDialog{
    MainClass mc = new MainClass();
    public static int count;
    public static String b = null;
    public static int stopprogress=1;
    public static int pauseprogress=1;
    public static int sec=0;
    public static int min=0;
    String song ="";
    public static int lastX, lastY;
    int x, y;
    public static int mouseX;
    int mouseY;
    boolean playnext = false;
    wall w;

    /**
     * Creates new form mp3
     */
    public mp3(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Connect();
        s1.setPaintTrack(false);
        s1.setBackground(new Color(0,0,0,0));
        s1.setMinorTickSpacing(1);
        p1.setEnabled(false);
        p1hover.setLocation(20, 20);
        setBackground(new Color(0,0,0,0));
        extra.setVisible(false);
        p1.setStringPainted(true);
        p1.setString("");
        p1.setForeground(new Color(0,153,204));
        audio.setVisible(false);
        s1.setVisible(false);
        audiocover.setVisible(false);
        w = new wall();
        int[] x = w.readwall(); 
        this.setLocation(x[0]-10,x[1]-10);
        //customCursor();
        new Thread()
            {
                public void run()
                {
                    try {
            Thread.sleep(500);
            loophover.setVisible(true);
            Thread.sleep(500);
            loophover.setVisible(false);
            stophover.setVisible(true);
            Thread.sleep(500);
            stophover.setVisible(false);
            playhover.setVisible(true);
            Thread.sleep(500);
            playhover.setVisible(false);
            pausehover.setVisible(true);
            Thread.sleep(500);
            pausehover.setVisible(false);
            selecthover.setVisible(true);
            Thread.sleep(500);
            selecthover.setVisible(false);
             } catch (InterruptedException ex) {
        }
                }
            }.start();   
                          mouseX=0;
                       new Thread()
                        {
                            public void run()
                            {
                               while(true)
                               {
                                   p1hover.setLocation(mouseX+20,20);    
                               }
                            }
                        }.start();  
                       new Thread()
                        {
                            public void run()
                            {
                               while(true)
                               {
                                   p1hover.setLocation(mouseX+20,20);    
                               }
                            }
                        }.start();        
                       lastX = this.getX();
                       lastY = this.getY();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   /* public void customCursor()
    {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image img = toolkit.getImage("cursor.png");
        Point point = new Point(0,0);
        Cursor cursor = toolkit.createCustomCursor(img, point,"Cursor");
        setCursor(cursor);
    }*/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cross = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        loc = new javax.swing.JLabel();
        p1hover = new javax.swing.JLabel();
        cover = new javax.swing.JLabel();
        p1 = new javax.swing.JProgressBar();
        lb = new javax.swing.JLabel();
        pause = new javax.swing.JLabel();
        pausehover = new javax.swing.JLabel();
        pausehover1 = new javax.swing.JLabel();
        select = new javax.swing.JLabel();
        selecthover = new javax.swing.JLabel();
        selecthover1 = new javax.swing.JLabel();
        play = new javax.swing.JLabel();
        playhover = new javax.swing.JLabel();
        playhover1 = new javax.swing.JLabel();
        stop = new javax.swing.JLabel();
        stophover = new javax.swing.JLabel();
        stophover1 = new javax.swing.JLabel();
        loop = new javax.swing.JLabel();
        loophover = new javax.swing.JLabel();
        loophover1 = new javax.swing.JLabel();
        pre = new javax.swing.JLabel();
        next1 = new javax.swing.JLabel();
        playplaylist = new javax.swing.JLabel();
        create = new javax.swing.JLabel();
        extra = new javax.swing.JLabel();
        hover = new javax.swing.JLabel();
        img = new javax.swing.JLabel();
        audiocover = new javax.swing.JLabel();
        s1 = new javax.swing.JSlider();
        audio = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cross.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cross.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/on.png"))); // NOI18N
        cross.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        cross.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cross.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                crossMouseMoved(evt);
            }
        });
        cross.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                crossMouseReleased(evt);
            }
        });
        getContentPane().add(cross, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 50, 20));

        time.setFont(new java.awt.Font("Bell MT", 0, 12)); // NOI18N
        time.setForeground(new java.awt.Color(204, 204, 204));
        time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        time.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        time.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeMouseClicked(evt);
            }
        });
        getContentPane().add(time, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 30, 10));

        loc.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        loc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/icon.png"))); // NOI18N
        loc.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        loc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loc.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                locMouseDragged(evt);
            }
        });
        loc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                locMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                locMouseReleased(evt);
            }
        });
        getContentPane().add(loc, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 30, 30));

        p1hover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/btn.png"))); // NOI18N
        p1hover.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(p1hover, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 200, 10));

        cover.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/p2.png"))); // NOI18N
        cover.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        cover.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(cover, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 210, 20));

        p1.setBackground(new java.awt.Color(255, 255, 51));
        p1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        p1.setBorderPainted(false);
        p1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        p1.setMaximumSize(new java.awt.Dimension(10, 7));
        p1.setMinimumSize(new java.awt.Dimension(10, 4));
        p1.setPreferredSize(new java.awt.Dimension(10, 8));
        p1.setString("null");
        p1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                p1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                p1MouseMoved(evt);
            }
        });
        p1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p1MouseClicked(evt);
            }
        });
        getContentPane().add(p1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 190, 10));

        lb.setFont(new java.awt.Font("Bell MT", 0, 14)); // NOI18N
        lb.setForeground(new java.awt.Color(204, 204, 204));
        lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb.setText("Happy Listening !!!");
        lb.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lb.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                lbMouseMoved(evt);
            }
        });
        lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbMouseClicked(evt);
            }
        });
        getContentPane().add(lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 4, 150, -1));

        pause.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pause.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pauseMouseMoved(evt);
            }
        });
        pause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pauseMouseClicked(evt);
            }
        });
        getContentPane().add(pause, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 20, 30));

        pausehover.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pausehover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        pausehover.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(pausehover, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 50, 40));

        pausehover1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pausehover1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        pausehover1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(pausehover1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 50, 40));

        select.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        select.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                selectMouseMoved(evt);
            }
        });
        select.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectMouseClicked(evt);
            }
        });
        getContentPane().add(select, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 30, 30));

        selecthover.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selecthover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        selecthover.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(selecthover, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 30, 40));

        selecthover1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selecthover1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        selecthover1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(selecthover1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 30, 40));

        play.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        play.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                playMouseMoved(evt);
            }
        });
        play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playMouseClicked(evt);
            }
        });
        getContentPane().add(play, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 30, 30));

        playhover.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playhover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        playhover.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(playhover, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 50, 40));

        playhover1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playhover1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        playhover1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(playhover1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 50, 40));

        stop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stop.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                stopMouseMoved(evt);
            }
        });
        stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopMouseClicked(evt);
            }
        });
        getContentPane().add(stop, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 20, 30));

        stophover.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        stophover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        stophover.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(stophover, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 24, 50, 50));

        stophover1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        stophover1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover.png"))); // NOI18N
        stophover1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(stophover1, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 24, 50, 50));

        loop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loop.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                loopMouseMoved(evt);
            }
        });
        loop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loopMouseClicked(evt);
            }
        });
        getContentPane().add(loop, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 30, 30));

        loophover.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loophover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover2.png"))); // NOI18N
        loophover.setToolTipText("");
        loophover.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        loophover.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        loophover.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                loophoverMouseMoved(evt);
            }
        });
        getContentPane().add(loophover, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 17, 70, 50));

        loophover1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loophover1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/hover2.png"))); // NOI18N
        loophover1.setToolTipText("");
        loophover1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        loophover1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        loophover1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                loophover1MouseMoved(evt);
            }
        });
        getContentPane().add(loophover1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 17, 70, 50));

        pre.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(pre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 20, 20));

        next1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        next1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                next1MouseReleased(evt);
            }
        });
        getContentPane().add(next1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 20, 20));

        playplaylist.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        playplaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                playplaylistMouseReleased(evt);
            }
        });
        getContentPane().add(playplaylist, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 60, 20));

        create.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        create.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                createMouseReleased(evt);
            }
        });
        getContentPane().add(create, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 60, 20));

        extra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/extra.png"))); // NOI18N
        getContentPane().add(extra, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 230, 20));

        hover.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                hoverMouseMoved(evt);
            }
        });
        hover.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                hoverMouseWheelMoved(evt);
            }
        });
        getContentPane().add(hover, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 230, 40));

        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/finalmp3.png"))); // NOI18N
        img.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                imgMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                imgMouseMoved(evt);
            }
        });
        img.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                imgFocusLost(evt);
            }
        });
        img.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                imgMouseWheelMoved(evt);
            }
        });
        img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imgMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imgMousePressed(evt);
            }
        });
        getContentPane().add(img, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 90));

        audiocover.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        audiocover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/a2.png"))); // NOI18N
        audiocover.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(audiocover, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 30, 120));

        s1.setBackground(new java.awt.Color(0, 0, 0));
        s1.setForeground(new java.awt.Color(0, 0, 0));
        s1.setOrientation(javax.swing.JSlider.VERTICAL);
        s1.setPaintTrack(false);
        s1.setToolTipText("");
        s1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        s1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        s1.setOpaque(false);
        s1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                s1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                s1MouseMoved(evt);
            }
        });
        s1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                s1MouseWheelMoved(evt);
            }
        });
        s1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                s1MouseClicked(evt);
            }
        });
        s1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                s1PropertyChange(evt);
            }
        });
        getContentPane().add(s1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 10, 70));

        audio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/audio3.png"))); // NOI18N
        audio.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(audio, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 10, 140));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void pauseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseMouseClicked
mc.pause();
pausehover1.setVisible(true);
playhover1.setVisible(false);
stophover1.setVisible(false);
    }//GEN-LAST:event_pauseMouseClicked

    private void selectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectMouseClicked
try
{
FileFilter filter = new FileNameExtensionFilter("MP3 files","mp3","mpeg3");
JFileChooser chooser;
if(w.getPath() != null)
{
        String x = w.getPath();
        chooser = new JFileChooser(x);
}
else
{
   chooser = new JFileChooser("C:\\Users\\"+System.getProperty("user.name")+"\\Music"); 
}      
chooser.addChoosableFileFilter(filter);
int returnval = chooser.showOpenDialog(null);
if(returnval == JFileChooser.APPROVE_OPTION)
{
    mc.stop();
    p1hover.setLocation(25,20);
    playhover1.setVisible(false);
    playhover.setVisible(true);
    k=0;
    l=0;
    File myfile = chooser.getSelectedFile();
    song = myfile + "";
    String name = chooser.getSelectedFile().getName();
    lb.setText(name);   
    String y = chooser.getSelectedFile().getPath();
    w.setPath(y);
    a=0;
    count=0;
    sec=0;
    min=0;
    stopprogress=1;
    mc.play(song);  
    mouseX=0;
    p1hover.setLocation(25, 20);
    p1.setEnabled(true);

    
new Thread()
{
    public void run()
    {
            try
            {
                min=0;sec=0;
                p1.setMaximum(k);  
                    for(int l=0; l<=k; l=k-fis.available())
                    {
                        p1.setValue(l);
                        sec++;  
                         if(sec>59)
                        {
                            sec=0;
                            min++;
                            min=min+sec/60;
                        } 
                        if(min!=0)
                           {  
                           time.setText(min+":"+sec);
                           }
                           else
                           {
                               time.setText(sec+"");
                           }     
                        Thread.sleep(1000);                       
                        mouseX++;
                        if(stopprogress==0)
                        {
                            p1.setValue(0);
                        }
                        if(player.isComplete()==true)
                        {
                            p1.setValue(0);
                            k=0;l=0;min=0;sec=0;
                            time.setText("");
                            break;          
                    }
                    }
            }
            catch(Exception e)
            {
            }
}
}.start();
        
    loophover.setVisible(false);
    loophover1.setVisible(false);
    stophover.setVisible(false);
    stophover1.setVisible(false);
    playhover.setVisible(false);
    playhover1.setVisible(true);
    pausehover.setVisible(false);
    pausehover1.setVisible(false);
    selecthover.setVisible(false);
    selecthover1.setVisible(false);
}
}
    catch(Exception e)
    {
        CJOptionPane.showMessageDialog("only mp3 and mpeg3 files are supported");
       // JOptionPane.showMessageDialog(null,"only mp3,mpeg3 files supported");
    }
    }//GEN-LAST:event_selectMouseClicked

    private void playMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMouseClicked
try
{
    if(a==0 && j==0)
    {
pauseprogress=1;
mc.resume();
stophover1.setVisible(false);
playhover1.setVisible(true);
pausehover1.setVisible(false);
a=1;
    }
}
catch(Exception e)
{  
}
    }//GEN-LAST:event_playMouseClicked

    private void stopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopMouseClicked
mc.stop();
time.setText("0");
pausecount=0;
p1.setValue(0);
stopprogress=0;
min=sec=0;
stophover1.setVisible(true);
playhover1.setVisible(false);
pausehover1.setVisible(false);
    }//GEN-LAST:event_stopMouseClicked

    private void loopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loopMouseClicked
switch(count)
{
    case 0 : count =1;
    loophover1.setVisible(true);
        break;
    case 1 : count =0;
    loophover1.setVisible(false);
        break;
}
    }//GEN-LAST:event_loopMouseClicked

    private void loopMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loopMouseMoved
loophover.setVisible(true);
stophover.setVisible(false);
playhover.setVisible(false);
pausehover.setVisible(false);
selecthover.setVisible(false);
extra.setVisible(false);
audio.setVisible(false);
s1.setVisible(false);
audiocover.setVisible(false);
    }//GEN-LAST:event_loopMouseMoved

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
loophover.setVisible(false);
loophover1.setVisible(false);
stophover.setVisible(false);
stophover1.setVisible(false);
playhover.setVisible(false);
playhover1.setVisible(false);
pausehover.setVisible(false);
pausehover1.setVisible(false);
selecthover.setVisible(false);
selecthover1.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void imgMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgMouseMoved
loophover.setVisible(false);
stophover.setVisible(false);
playhover.setVisible(false);
pausehover.setVisible(false);
selecthover.setVisible(false);
extra.setVisible(false);
audio.setVisible(false);
s1.setVisible(false);
audiocover.setVisible(false);
//p1hover.setIcon(new javax.swing.ImageIcon(getClass().getResource("")));  
    }//GEN-LAST:event_imgMouseMoved

    private void stopMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopMouseMoved
stophover.setVisible(true);
loophover.setVisible(false);
playhover.setVisible(false);
pausehover.setVisible(false);
selecthover.setVisible(false);
extra.setVisible(false);
audio.setVisible(false);
s1.setVisible(false);
audiocover.setVisible(false);
    }//GEN-LAST:event_stopMouseMoved

    private void playMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMouseMoved
playhover.setVisible(true);
loophover.setVisible(false);
stophover.setVisible(false);
pausehover.setVisible(false);
selecthover.setVisible(false);
extra.setVisible(false);
audio.setVisible(false);
s1.setVisible(false);
audiocover.setVisible(false);
    }//GEN-LAST:event_playMouseMoved

    private void pauseMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseMouseMoved
pausehover.setVisible(true);
loophover.setVisible(false);
stophover.setVisible(false);
playhover.setVisible(false);
selecthover.setVisible(false);
extra.setVisible(false);
audio.setVisible(false);
s1.setVisible(false);
audiocover.setVisible(false);
    }//GEN-LAST:event_pauseMouseMoved

    private void selectMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectMouseMoved
selecthover.setVisible(true);
loophover.setVisible(false);
stophover.setVisible(false);
playhover.setVisible(false);
pausehover.setVisible(false);
extra.setVisible(false);
audio.setVisible(false);
s1.setVisible(false);
audiocover.setVisible(false);
    }//GEN-LAST:event_selectMouseMoved

    private void crossMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crossMouseMoved
//cross.setIcon(new javax.swing.ImageIcon(getClass().getResource("cross.png")));
    }//GEN-LAST:event_crossMouseMoved

    private void crossMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crossMouseReleased
try
{
    new Thread()
    {
        public void run()
        {
          cross.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mp3/player/off1.png")));  
        }
    }.start();
new Thread()
{
    public void run()
    {
        try {
            Thread.sleep(1000);
            System.exit(0);
        } catch (InterruptedException ex) {
        }
    }
}.start();
}
catch(Exception e)
{}
    }//GEN-LAST:event_crossMouseReleased

    private void imgMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgMousePressed

    }//GEN-LAST:event_imgMousePressed

    private void imgMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgMouseDragged
            
    }//GEN-LAST:event_imgMouseDragged

    private void loophoverMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loophoverMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_loophoverMouseMoved

    private void loophover1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loophover1MouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_loophover1MouseMoved

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved

    }//GEN-LAST:event_formMouseMoved

    private void imgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imgMouseClicked
if(evt.getClickCount()==2)
{
    this.setAlwaysOnTop(true);
}
if(evt.getClickCount()==3)
{
    this.setAlwaysOnTop(false);
}
    }//GEN-LAST:event_imgMouseClicked

    private void locMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locMousePressed
lastX = evt.getXOnScreen();
lastY = evt.getYOnScreen();
    }//GEN-LAST:event_locMousePressed

    private void locMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locMouseDragged
            int x = evt.getXOnScreen();
            int y = evt.getYOnScreen();
            setLocation(getLocationOnScreen().x + x - lastX,getLocationOnScreen().y + y - lastY);
            lastX = x;
            lastY = y;
            w.writeWall((lastX)+"",(lastY)+"");
    }//GEN-LAST:event_locMouseDragged

    private void createMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createMouseReleased
try
{
b = JOptionPane.showInputDialog("Playlist Name");
if(b!=null)
{
FileFilter filter = new FileNameExtensionFilter("MP3 files","mp3","mpeg3");
JFileChooser chooser;
if(w.getPath() != null)
{
        String x = w.getPath();
        chooser = new JFileChooser(x);
}
else
{
   chooser = new JFileChooser("C://"); 
}      
chooser.addChoosableFileFilter(filter);
chooser.setMultiSelectionEnabled(true);
int returnval = chooser.showOpenDialog(null);
if(returnval == JFileChooser.APPROVE_OPTION)
{
File[] files = chooser.getSelectedFiles();
String z[] = new String[files.length];
String n[] = new String[files.length];

String pname = b;
PreparedStatement st = null;

for(int i=0;i<z.length;i++)
{
n[i] = files[i].getName();
z[i] = files[i].getPath();
st=DB.conn.prepareStatement("insert into playlist(pname,sname,spath) values(?,?,?)");
st.setString(1, b);
st.setString(2, n[i]);
st.setString(3, z[i]);
st.executeUpdate();
}
CJOptionPane.showMessageDialog("Playlist ( "+b+" ) Was Created Successfully");
//JOptionPane.showMessageDialog(null,"Playlist ( "+b+" ) Was Created Successfully");
java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                playlist dialog = new playlist(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
}   
}
}
catch(Exception e)
{
    System.out.println(e.getMessage()); 
}
    }//GEN-LAST:event_createMouseReleased

    private void next1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_next1MouseReleased
/*if(w.getPlaylist() != null)
{
  //  for(int i=0;i<w.get)
    String z[] = w.getPlaylist();
     mc.stop();
     a=0;
     count=0;
     mc.play(z[0]);
     lb.setText(z[1]);
}*/
playnext=true;
    }//GEN-LAST:event_next1MouseReleased

    private void hoverMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hoverMouseMoved
                extra.setVisible(true);
                audio.setVisible(true);
                s1.setVisible(true);
                audiocover.setVisible(true);
pausehover.setVisible(false);
loophover.setVisible(false);
stophover.setVisible(false);
playhover.setVisible(false);
selecthover.setVisible(false);
    }//GEN-LAST:event_hoverMouseMoved

    private void p1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p1MouseClicked
        new Thread()
        {
            public void run()
            {
        try {
             int v = p1.getValue(); 
             mouseX = evt.getX();    
             p1hover.setLocation(mouseX,20);
            //Computes how far along the mouse is relative to the component width then multiply it by the progress bar's maximum value.
            int progressBarVal = (int)Math.round(((double)mouseX / (double)p1.getWidth()) * p1.getMaximum());            
            p1.setValue(progressBarVal);  
            fis.skip((long) (progressBarVal-v));
        } catch (Exception ex) {
        }
        }
        }.start();
    }//GEN-LAST:event_p1MouseClicked

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost

    }//GEN-LAST:event_formFocusLost

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited

    }//GEN-LAST:event_formMouseExited

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated

    }//GEN-LAST:event_formWindowDeactivated

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
selecthover.setVisible(false);
pausehover.setVisible(false);
playhover.setVisible(false);
stophover.setVisible(false);
loophover.setVisible(false);
    }//GEN-LAST:event_formWindowLostFocus

    private void locMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locMouseClicked
if(evt.getClickCount()==2)
{
    this.setAlwaysOnTop(true);
}
if(evt.getClickCount()==3)
{
    this.setAlwaysOnTop(false);
}
    }//GEN-LAST:event_locMouseClicked

    private void timeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeMouseClicked
if(evt.getClickCount()==2)
{
    this.setAlwaysOnTop(true);
}
if(evt.getClickCount()==3)
{
    this.setAlwaysOnTop(false);
}
    }//GEN-LAST:event_timeMouseClicked

    private void lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMouseClicked
if(evt.getClickCount()==2)
{
    this.setAlwaysOnTop(true);
}
if(evt.getClickCount()==3)
{
    this.setAlwaysOnTop(false);
}
    }//GEN-LAST:event_lbMouseClicked

    private void p1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p1MouseMoved

    }//GEN-LAST:event_p1MouseMoved

    private void lbMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMouseMoved

    }//GEN-LAST:event_lbMouseMoved

    private void p1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p1MouseDragged
 new Thread()
        {
            public void run()
            {
        try {
            int v = p1.getValue();  
            //Retrieves the mouse position relative to the component origin.
             mouseX = evt.getX();      
             p1hover.setLocation(mouseX,20);
            //Computes how far along the mouse is relative to the component width then multiply it by the progress bar's maximum value.
            int progressBarVal = (int)Math.round(((double)mouseX / (double)p1.getWidth()) * p1.getMaximum());            
            p1.setValue(progressBarVal);
            fis.skip((long) (progressBarVal-v));
        } catch (Exception ex) {
        }
        }
        }.start();       
    }//GEN-LAST:event_p1MouseDragged

    private void s1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s1MouseDragged
Info source = Port.Info.SPEAKER;
            //source = Port.Info.LINE_OUT;
         //  source = Port.Info.HEADPHONE;
 if (AudioSystem.isLineSupported(source)) 
        {
            try 
            {
                Port outline = (Port) AudioSystem.getLine(source);
                outline.open();                
                FloatControl volumeControl = (FloatControl) outline.getControl(FloatControl.Type.VOLUME);            
                float v = (float)s1.getValue();
              
                volumeControl.setValue(v/100);
   
            } 
            catch (LineUnavailableException ex) 
            {
                System.err.println("source not supported");
                ex.printStackTrace();
            }            
        }          
    }//GEN-LAST:event_s1MouseDragged

    private void s1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s1MouseClicked
Info source = Port.Info.SPEAKER;
            //source = Port.Info.LINE_OUT;
         //  source = Port.Info.HEADPHONE;
 if (AudioSystem.isLineSupported(source)) 
        {
            try 
            {
                Port outline = (Port) AudioSystem.getLine(source);
                outline.open();                
                FloatControl volumeControl = (FloatControl) outline.getControl(FloatControl.Type.VOLUME);            
                float v = (float)s1.getValue();
              
                volumeControl.setValue(v/100);
   
            } 
            catch (LineUnavailableException ex) 
            {
                System.err.println("source not supported");
                ex.printStackTrace();
            }            
        }          
    }//GEN-LAST:event_s1MouseClicked

    private void s1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_s1PropertyChange

    }//GEN-LAST:event_s1PropertyChange

    private void s1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_s1MouseWheelMoved
Info source = Port.Info.SPEAKER;  //source = Port.Info.LINE_OUT;  //  source = Port.Info.HEADPHONE;
 if (AudioSystem.isLineSupported(source)) 
        {
            try 
            {     
                Port outline = (Port) AudioSystem.getLine(source);
                outline.open();                
                FloatControl volumeControl = (FloatControl) outline.getControl(FloatControl.Type.VOLUME);
                 if (evt.getWheelRotation() > 0 )//mouse wheel was rotated up/away from the user
        {
            int iNewValue = s1.getValue() - s1.getMinorTickSpacing()  ;
            if (iNewValue >= s1.getMinimum())
            {
                s1.setValue(iNewValue);
                float v = s1.getValue();
                volumeControl.setValue(v/100);
            }
            else
            {
                s1.setValue(0);
            }
        }
        else
        {
            int iNewValue = s1.getValue() + s1.getMinorTickSpacing()  ;
            if (iNewValue <= s1.getMaximum())
            {
                s1.setValue(iNewValue);
                float v = s1.getValue();
                volumeControl.setValue(v/100);
            }
            else
            {
                s1.setValue(s1.getMaximum());
            }
        }
            } 
            catch (LineUnavailableException ex) 
            {
                System.err.println("source not supported");
                ex.printStackTrace();
            }            
        }                 
    }//GEN-LAST:event_s1MouseWheelMoved

    private void imgMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_imgMouseWheelMoved
Info source = Port.Info.SPEAKER;  //source = Port.Info.LINE_OUT;  //  source = Port.Info.HEADPHONE;
 if (AudioSystem.isLineSupported(source)) 
        {
            try 
            {     
                Port outline = (Port) AudioSystem.getLine(source);
                outline.open();                
                FloatControl volumeControl = (FloatControl) outline.getControl(FloatControl.Type.VOLUME);
                 if (evt.getWheelRotation() > 0 )//mouse wheel was rotated up/away from the user
        {
            int iNewValue = s1.getValue() - s1.getMinorTickSpacing()  ;
            if (iNewValue >= s1.getMinimum())
            {
                s1.setValue(iNewValue);
                float v = s1.getValue();
                volumeControl.setValue(v/100);
            }
            else
            {
                s1.setValue(0);
            }
        }
        else
        {
            int iNewValue = s1.getValue() + s1.getMinorTickSpacing()  ;
            if (iNewValue <= s1.getMaximum())
            {
                s1.setValue(iNewValue);
                float v = s1.getValue();
                volumeControl.setValue(v/100);
            }
            else
            {
                s1.setValue(s1.getMaximum());
            }
        }
            } 
            catch (LineUnavailableException ex) 
            {
                System.err.println("source not supported");
                ex.printStackTrace();
            }            
        }          
    }//GEN-LAST:event_imgMouseWheelMoved

    private void hoverMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_hoverMouseWheelMoved
Info source = Port.Info.SPEAKER;  //source = Port.Info.LINE_OUT;  //  source = Port.Info.HEADPHONE;
 if (AudioSystem.isLineSupported(source)) 
        {
            try 
            {     
                Port outline = (Port) AudioSystem.getLine(source);
                outline.open();                
                FloatControl volumeControl = (FloatControl) outline.getControl(FloatControl.Type.VOLUME);
                 if (evt.getWheelRotation() > 0 )//mouse wheel was rotated up/away from the user
        {
            int iNewValue = s1.getValue() - s1.getMinorTickSpacing()  ;
            if (iNewValue >= s1.getMinimum())
            {
                s1.setValue(iNewValue);
                float v = s1.getValue();
                volumeControl.setValue(v/100);
            }
            else
            {
                s1.setValue(0);
            }
        }
        else
        {
            int iNewValue = s1.getValue() + s1.getMinorTickSpacing()  ;
            if (iNewValue <= s1.getMaximum())
            {
                s1.setValue(iNewValue);
                float v = s1.getValue();
                volumeControl.setValue(v/100);
            }
            else
            {
                s1.setValue(s1.getMaximum());
            }
        }
            } 
            catch (LineUnavailableException ex) 
            {
                System.err.println("source not supported");
                ex.printStackTrace();
            }            
        }          
    }//GEN-LAST:event_hoverMouseWheelMoved

    private void s1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s1MouseMoved
pausehover.setVisible(false);
loophover.setVisible(false);
stophover.setVisible(false);
playhover.setVisible(false);
selecthover.setVisible(false);
    }//GEN-LAST:event_s1MouseMoved

    private void imgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_imgFocusLost
pausehover.setVisible(false);
loophover.setVisible(false);
stophover.setVisible(false);
playhover.setVisible(false);
selecthover.setVisible(false);

    }//GEN-LAST:event_imgFocusLost

    private void playplaylistMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playplaylistMouseReleased
playlist();
    /*    try
{
    new Thread()
    {
        public void run()
        {
            try {
                String s1,s2;
                ResultSet rs=DB.stmt.executeQuery("select * from playlist where pname='happy' ");
                while(rs.next())
                {
                    s1=rs.getString("sname");
                    s2=rs.getString("spath");
                    mc.play(s2);
                    lb.setText(s1);
                    while(true)
                    {
                        if(player.isComplete()==false)
                        {
                            Thread.sleep(1000);
                        }
                        else
                        {
                            break;
                        }
                    }
                }    } catch (SQLException ex) {
                Logger.getLogger(mp3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(mp3.class.getName()).log(Level.SEVERE, null, ex);
            }
  
        }
    }.start();
}
catch(Exception e)
{
    
}    */
    }//GEN-LAST:event_playplaylistMouseReleased

    private void locMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locMouseReleased
        try {
            lastX = evt.getXOnScreen();
            lastY = evt.getYOnScreen();
            PreparedStatement st = null;
            st=DB.conn.prepareStatement("insert into loc(x,y) values(?,?)");
            st.setInt(1, lastX);
            st.setInt(2, lastY);
            st.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(mp3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_locMouseReleased

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
               /* if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }*/
                UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mp3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mp3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mp3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mp3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mp3 dialog = new mp3(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel audio;
    private javax.swing.JLabel audiocover;
    private javax.swing.JLabel cover;
    private javax.swing.JLabel create;
    private javax.swing.JLabel cross;
    private javax.swing.JLabel extra;
    private javax.swing.JLabel hover;
    private javax.swing.JLabel img;
    public static javax.swing.JLabel lb;
    private javax.swing.JLabel loc;
    private javax.swing.JLabel loop;
    public static javax.swing.JLabel loophover;
    private javax.swing.JLabel loophover1;
    private javax.swing.JLabel next1;
    public static javax.swing.JProgressBar p1;
    public static javax.swing.JLabel p1hover;
    private javax.swing.JLabel pause;
    public static javax.swing.JLabel pausehover;
    private javax.swing.JLabel pausehover1;
    private javax.swing.JLabel play;
    public static javax.swing.JLabel playhover;
    public static javax.swing.JLabel playhover1;
    private javax.swing.JLabel playplaylist;
    private javax.swing.JLabel pre;
    private javax.swing.JSlider s1;
    private javax.swing.JLabel select;
    public static javax.swing.JLabel selecthover;
    private javax.swing.JLabel selecthover1;
    private javax.swing.JLabel stop;
    public static javax.swing.JLabel stophover;
    private javax.swing.JLabel stophover1;
    public static javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
void playlist()
{
try
{
    new Thread()
    {
        public void run()
        {
            try {
                String s1,s2;
                ResultSet rs=DB.stmt.executeQuery("select * from playlist where pname='happy' ");
                while(rs.next())
                {
                    s1=rs.getString("sname");
                    s2=rs.getString("spath");
                    mc.play(s2);
                    lb.setText(s1);
                    while(true)
                    {
                        if(player.isComplete()==false)
                        {
                            Thread.sleep(1000);
                        }
                        else
                        {
                            break;
                        }
                        if(playnext == true)
                        {
                            playnext=false;
                            mc.stop();
                            break;
                        }
                    }
                }
                
            //JOptionPane.showMessageDialog(null, "Playlist ends");
                extra.setVisible(false);
                audio.setVisible(false);
                audiocover.setVisible(false);
                //s1.setVisible(false);
                CJOptionPane.showMessageDialog("Playlist Ends");
            lb.setText("");
            } catch (SQLException ex) {
                Logger.getLogger(mp3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(mp3.class.getName()).log(Level.SEVERE, null, ex);
            }
  
        }
    }.start();
}
catch(Exception e)
{
    
}  
}
}
 
